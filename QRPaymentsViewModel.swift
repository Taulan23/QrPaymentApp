//
//  QRPaymentsViewModel.swift
//  QRPayments
//
//  Created by QR Payments Team on 25/09/2025.
//

import SwiftUI
import PhotosUI
import UIKit
import Combine

class QRPaymentsViewModel: ObservableObject {
    // MARK: - Published Properties
    @Published var exchangeRate: Double? = nil
    @Published var rmbAmount: Double? = nil
    @Published var rubAmount: Double? = nil
    @Published var contractNumberEnabled: Bool = false
    @Published var contractNumber: String = "22"
    @Published var qrCodeImage: UIImage? = nil
    @Published var qrDisplayText: String? = nil
    @Published var currentQRFormat: QRFormat = .spb
    
    // MARK: - Private Properties
    private let qrGenerator = QRCodeGenerator()
    private let currencyCalculator = CurrencyCalculator()
    private let spbQRFormat = SPBQRFormat()
    
    // –ö—ç—à –¥–ª—è QR –∫–æ–¥–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
    private var qrCodeCache: [String: UIImage] = [:]
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    private var cacheHits: Int = 0
    private var cacheMisses: Int = 0
    private var totalCacheSize: Int = 0
    
    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    private var isGeneratingQR = false
    
    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
    @Published var isSaving = false
    
    // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ PDF)
    private let bankName = "–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ü–†–ï–î–ü–†–ò–ù–ò–ú–ê–¢–ï–õ–¨ –ö–û–ù–û–ù–ï–ù–ö–û –†–û–ë–ï–†–¢ –ê–õ–ï–ö–°–ê–ù–î–†–û–í–ò–ß"
    private let inn = "270395244282"
    private let accountNumber = "40802810100004257312"
    private let ogrn = "323237500046362"
    private let bank = "–ê–û ¬´–¢–ë–∞–Ω–∫¬ª"
    private let bik = "044525974"
    private let bankInn = "7710140679"
    private let corrAccount = "30101810145250000974"
    private let legalAddress = "127287, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –•—É—Ç–æ—Ä—Å–∫–∞—è 2-—è, –¥. 38–ê, —Å—Ç—Ä. 26"
    
    // MARK: - Computed Properties
    var currentFormatDescription: String {
        switch currentQRFormat {
        case .spb:
            return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –°–ë–ü (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n–°–æ–≤–º–µ—Å—Ç–∏–º —Å–æ –≤—Å–µ–º–∏ –±–∞–Ω–∫–∞–º–∏ —á–µ—Ä–µ–∑ –°–ë–ü"
        case .bank:
            return "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç\n–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π QR-–∫–æ–¥"
        case .simple:
            return "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç\n–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"
        }
    }
    
    // MARK: - Initialization
    init() {
        setupBindings()
    }
    
    // MARK: - Private Methods
    private func setupBindings() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        Publishers.CombineLatest4($exchangeRate, $rmbAmount, $rubAmount, $contractNumberEnabled)
            .combineLatest($contractNumber)
            .debounce(for: .milliseconds(300), scheduler: RunLoop.main)
            .sink { [weak self] _ in
                self?.calculateAndUpdateQR()
            }
            .store(in: &cancellables)
    }
    
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Public Methods
    func calculateAndUpdateQR() {
        guard let exchangeRate = exchangeRate,
              let rmbAmount = rmbAmount,
              exchangeRate > 0,
              rmbAmount > 0 else {
            clearQRCode()
            return
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö
        let calculatedRubAmount = rmbAmount * exchangeRate
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ
        if rubAmount == nil {
            DispatchQueue.main.async {
                self.rubAmount = calculatedRubAmount
            }
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—É–º–º—É
        let finalRubAmount = rubAmount ?? calculatedRubAmount
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateQRCodeDisplay(rmbAmount: rmbAmount, rubAmount: finalRubAmount)
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        generateQRCodeForAmount(rmbAmount: rmbAmount, rubAmount: finalRubAmount)
    }
    
    func calculateAndUpdateQRFromRub() {
        guard let rubAmount = rubAmount,
              rubAmount > 0 else {
            clearQRCode()
            return
        }
        
        var finalRmbAmount = rmbAmount ?? 0
        var finalExchangeRate = exchangeRate ?? 11.65
        
        if finalRmbAmount > 0 {
            // –ï—Å—Ç—å RMB –∏ —Ä—É–±–ª–∏ - –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å
            finalExchangeRate = rubAmount / finalRmbAmount
            DispatchQueue.main.async {
                self.exchangeRate = finalExchangeRate
            }
        } else if finalExchangeRate > 0 {
            // –ï—Å—Ç—å –∫—É—Ä—Å –∏ —Ä—É–±–ª–∏ - –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º RMB
            finalRmbAmount = rubAmount / finalExchangeRate
            DispatchQueue.main.async {
                self.rmbAmount = finalRmbAmount
            }
        } else {
            clearQRCode()
            return
        }
        
        if finalRmbAmount > 0 && rubAmount > 0 {
            updateQRCodeDisplay(rmbAmount: finalRmbAmount, rubAmount: rubAmount)
            generateQRCodeForAmount(rmbAmount: finalRmbAmount, rubAmount: rubAmount)
        } else {
            clearQRCode()
        }
    }
    
    private func updateQRCodeDisplay(rmbAmount: Double, rubAmount: Double) {
        DispatchQueue.main.async {
            self.qrDisplayText = "\(String(format: "%.2f", rmbAmount)) rmb / \(String(format: "%.2f", rubAmount)) —Ä—É–±."
        }
    }
    
    private func generateQRCodeForAmount(rmbAmount: Double, rubAmount: Double) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        guard rmbAmount > 0 && rubAmount > 0 && rmbAmount.isFinite && rubAmount.isFinite else {
            clearQRCode()
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –Ω–µ –∏–¥–µ—Ç
        guard !isGeneratingQR else {
            print("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        }
        
        let qrText = buildQRCodeText(rmbAmount: rmbAmount, rubAmount: rubAmount)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç QR-–∫–æ–¥–∞ –Ω–µ –ø—É—Å—Ç–æ–π
        guard !qrText.isEmpty else {
            clearQRCode()
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        let cacheKey = "\(rmbAmount)_\(rubAmount)_\(currentQRFormat)"
        if let cachedImage = qrCodeCache[cacheKey] {
            cacheHits += 1
            print("üéØ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ! –í—Å–µ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π: \(cacheHits), –ø—Ä–æ–º–∞—Ö–æ–≤: \(cacheMisses)")
            DispatchQueue.main.async { [weak self] in
                self?.qrCodeImage = cachedImage
                self?.qrDisplayText = qrText
            }
            return
        }
        
        cacheMisses += 1
        print("üíæ –ö—ç—à –ø—Ä–æ–º–∞—Ö! –í—Å–µ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π: \(cacheHits), –ø—Ä–æ–º–∞—Ö–æ–≤: \(cacheMisses)")
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        isGeneratingQR = true
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        DispatchQueue.global(qos: .userInitiated).async { [weak self] in
            guard let self = self else { return }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ QR-–∫–æ–¥–µ
            let topText = "\(String(format: "%.0f", rmbAmount)) rmb / \(String(format: "%.0f", rubAmount)) —Ä—É–±."
            let bottomText = "–ö—É—Ä—Å: \(String(format: "%.2f", rmbAmount > 0 ? rubAmount / rmbAmount : 0))"
            
            self.qrGenerator.generateQRCodeWithText(
                qrText: qrText,
                topText: topText,
                bottomText: bottomText
            ) { image in
                DispatchQueue.main.async { [weak self] in
                    guard let self = self else { return }
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    self.isGeneratingQR = false
                    
                    if let image = image {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ
                        self.qrCodeCache[cacheKey] = image
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
                        let imageSize = Int(image.size.width * image.size.height * 4) // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
                        self.totalCacheSize += imageSize
                        
                        print("üíæ QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à. –†–∞–∑–º–µ—Ä –∫—ç—à–∞: \(self.qrCodeCache.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤, ~\(self.totalCacheSize / 1024) KB")
                        
                        self.qrCodeImage = image
                        self.qrDisplayText = qrText
                    } else {
                        // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—á–∏—â–∞–µ–º QR-–∫–æ–¥
                        self.clearQRCode()
                    }
                }
            }
        }
    }
    
    
    private func buildQRCodeText(rmbAmount: Double, rubAmount: Double) -> String {
        let purpose = contractNumberEnabled 
            ? "–û–ø–ª–∞—Ç–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É \(contractNumber). –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞ \(formatNumber(rmbAmount)) RMB"
            : "–£—Å–ª—É–≥–∞ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞ \(formatNumber(rmbAmount)) RMB"
        
        switch currentQRFormat {
        case .spb:
            return spbQRFormat.buildSPBQrCode(
                rubAmount: rubAmount,
                purpose: purpose,
                bankName: bankName,
                accountNumber: accountNumber,
                bank: bank,
                bik: bik,
                corrAccount: corrAccount,
                inn: inn,
                ogrn: ogrn,
                bankInn: bankInn,
                legalAddress: legalAddress
            )
        case .bank:
            return spbQRFormat.buildBankPaymentQrCode(
                rubAmount: rubAmount,
                purpose: purpose,
                bankName: bankName,
                accountNumber: accountNumber,
                bank: bank,
                bik: bik,
                corrAccount: corrAccount,
                inn: inn,
                ogrn: ogrn,
                bankInn: bankInn,
                legalAddress: legalAddress
            )
        case .simple:
            return "–°–ë–ü: \(formatNumber(rubAmount)) —Ä—É–±. - \(purpose) - –ü–æ–ª—É—á–∞—Ç–µ–ª—å: \(bankName) (\(inn)) - –°—á–µ—Ç: \(accountNumber)"
        }
    }
    
    private func formatNumber(_ number: Double) -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        formatter.groupingSeparator = " "
        formatter.maximumFractionDigits = 0
        return formatter.string(from: NSNumber(value: number)) ?? "\(Int(number))"
    }
    
    func toggleQRFormat() {
        currentQRFormat = currentQRFormat.next()
        calculateAndUpdateQR()
    }
    
    func clearQRCode() {
        DispatchQueue.main.async {
            self.qrCodeImage = nil
            self.qrDisplayText = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        }
    }
    
    // MARK: - Cache Management
    func getCacheStatistics() -> (hits: Int, misses: Int, size: Int, count: Int) {
        return (cacheHits, cacheMisses, totalCacheSize, qrCodeCache.count)
    }
    
    func clearCache() {
        qrCodeCache.removeAll()
        cacheHits = 0
        cacheMisses = 0
        totalCacheSize = 0
        print("üóëÔ∏è –ö—ç—à QR-–∫–æ–¥–æ–≤ –æ—á–∏—â–µ–Ω")
    }
    
    func preloadCommonQRCodes() {
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        let commonRates = [11.0, 11.5, 12.0, 12.25, 12.5, 13.0]
        let commonAmounts = [100.0, 500.0, 1000.0, 2000.0, 5000.0, 10000.0]
        
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö QR-–∫–æ–¥–æ–≤...")
        
        DispatchQueue.global(qos: .background).async { [weak self] in
            guard let self = self else { return }
            
            for rate in commonRates {
                for amount in commonAmounts {
                    let rubAmount = amount * rate
                    let qrText = self.buildQRCodeText(rmbAmount: amount, rubAmount: rubAmount)
                    
                    if !qrText.isEmpty {
                        let topText = "\(String(format: "%.0f", amount)) rmb / \(String(format: "%.0f", rubAmount)) —Ä—É–±."
                        let bottomText = "–ö—É—Ä—Å: \(String(format: "%.2f", rate))"
                        
                        self.qrGenerator.generateQRCodeWithText(
                            qrText: qrText,
                            topText: topText,
                            bottomText: bottomText
                        ) { image in
                            if let image = image {
                                let cacheKey = "\(amount)_\(rubAmount)_\(self.currentQRFormat)"
                                self.qrCodeCache[cacheKey] = image
                                
                                let imageSize = Int(image.size.width * image.size.height * 4)
                                self.totalCacheSize += imageSize
                            }
                        }
                    }
                }
            }
            
            DispatchQueue.main.async {
                print("‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç \(self.qrCodeCache.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            }
        }
    }
    
    func saveQRCode() {
        guard !isSaving else { return }
        guard let qrImage = qrCodeImage else {
            showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ—Ç QR-–∫–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        }
        
        isSaving = true
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ callback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) { [weak self] in
            guard let self = self else { return }
            if self.isSaving {
                self.isSaving = false
                self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–¢–∞–π–º–∞—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            }
        }
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        if PHPhotoLibrary.authorizationStatus() == .authorized {
            UIImageWriteToSavedPhotosAlbum(qrImage, self, #selector(image(_:didFinishSavingWithError:contextInfo:)), nil)
        } else {
            PHPhotoLibrary.requestAuthorization { status in
                DispatchQueue.main.async {
                    if status == .authorized {
                        UIImageWriteToSavedPhotosAlbum(qrImage, self, #selector(self.image(_:didFinishSavingWithError:contextInfo:)), nil)
                    } else {
                        self.isSaving = false
                        self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞–ª–µ—Ä–µ–µ")
                    }
                }
            }
        }
    }
    
    
    
    @objc private func image(_ image: UIImage, didFinishSavingWithError error: Error?, contextInfo: UnsafeRawPointer) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            self.isSaving = false
            
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: \(error.localizedDescription)")
                self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: \(error.localizedDescription)")
            } else {
                print("‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                self.showAlert(title: "–£—Å–ø–µ—Ö", message: "QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≥–∞–ª–µ—Ä–µ—é")
            }
        }
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ PhotosUI
    func saveQRCodeAlternative() {
        guard !isSaving else { return }
        guard let qrImage = qrCodeImage else {
            showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ—Ç QR-–∫–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        }
        
        isSaving = true
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º PHPhotoLibrary –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        PHPhotoLibrary.shared().performChanges({
            PHAssetChangeRequest.creationRequestForAsset(from: qrImage)
        }) { [weak self] success, error in
            DispatchQueue.main.async {
                guard let self = self else { return }
                self.isSaving = false
                
                if success {
                    self.showAlert(title: "–£—Å–ø–µ—Ö", message: "QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≥–∞–ª–µ—Ä–µ—é")
                } else {
                    let errorMessage = error?.localizedDescription ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                    self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: \(errorMessage)")
                }
            }
        }
    }
    
    private func showAlert(title: String, message: String) {
        DispatchQueue.main.async {
            guard let windowScene = UIApplication.shared.connectedScenes
                .compactMap({ $0 as? UIWindowScene })
                .first(where: { $0.activationState == .foregroundActive }),
                  let window = windowScene.windows.first(where: { $0.isKeyWindow }),
                  let rootViewController = window.rootViewController else {
                return
            }
            
            let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default))
            rootViewController.present(alert, animated: true)
        }
    }
    
    func loadSavedData() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ UserDefaults
        if let savedExchangeRate = UserDefaults.standard.object(forKey: "exchangeRate") as? Double {
            exchangeRate = savedExchangeRate
        }
        if let savedRmbAmount = UserDefaults.standard.object(forKey: "rmbAmount") as? Double {
            rmbAmount = savedRmbAmount
        }
        if let savedRubAmount = UserDefaults.standard.object(forKey: "rubAmount") as? Double {
            rubAmount = savedRubAmount
        }
        contractNumberEnabled = UserDefaults.standard.bool(forKey: "contractNumberEnabled")
        if let savedContractNumber = UserDefaults.standard.string(forKey: "contractNumber") {
            contractNumber = savedContractNumber
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        cacheHits = UserDefaults.standard.integer(forKey: "cacheHits")
        cacheMisses = UserDefaults.standard.integer(forKey: "cacheMisses")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö QR-–∫–æ–¥–æ–≤
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            self.preloadCommonQRCodes()
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        $exchangeRate.sink { [weak self] value in
            if let value = value {
                UserDefaults.standard.set(value, forKey: "exchangeRate")
            }
        }.store(in: &cancellables)
        
        $rmbAmount.sink { [weak self] value in
            if let value = value {
                UserDefaults.standard.set(value, forKey: "rmbAmount")
            }
        }.store(in: &cancellables)
        
        $rubAmount.sink { [weak self] value in
            if let value = value {
                UserDefaults.standard.set(value, forKey: "rubAmount")
            }
        }.store(in: &cancellables)
        
        $contractNumberEnabled.sink { [weak self] value in
            UserDefaults.standard.set(value, forKey: "contractNumberEnabled")
        }.store(in: &cancellables)
        
        $contractNumber.sink { [weak self] value in
            UserDefaults.standard.set(value, forKey: "contractNumber")
        }.store(in: &cancellables)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        Timer.publish(every: 30.0, on: .main, in: .common)
            .autoconnect()
            .sink { [weak self] _ in
                guard let self = self else { return }
                UserDefaults.standard.set(self.cacheHits, forKey: "cacheHits")
                UserDefaults.standard.set(self.cacheMisses, forKey: "cacheMisses")
            }
            .store(in: &cancellables)
    }
}

// MARK: - QR Format Enum
enum QRFormat: CaseIterable {
    case spb
    case bank
    case simple
    
    func next() -> QRFormat {
        let allCases = QRFormat.allCases
        let currentIndex = allCases.firstIndex(of: self) ?? 0
        let nextIndex = (currentIndex + 1) % allCases.count
        return allCases[nextIndex]
    }
}
